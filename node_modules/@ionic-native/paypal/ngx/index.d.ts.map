{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\n/**\n * @name PayPal\n * @description\n * PayPal plugin for Cordova/Ionic Applications\n *\n * @usage\n * ```typescript\n * import { PayPal, PayPalPayment, PayPalConfiguration } from '@ionic-native/paypal/ngx';\n *\n * constructor(private payPal: PayPal) { }\n *\n * ...\n *\n *\n * this.payPal.init({\n *   PayPalEnvironmentProduction: 'YOUR_PRODUCTION_CLIENT_ID',\n *   PayPalEnvironmentSandbox: 'YOUR_SANDBOX_CLIENT_ID'\n * }).then(() => {\n *   // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction\n *   this.payPal.prepareToRender('PayPalEnvironmentSandbox', new PayPalConfiguration({\n *     // Only needed if you get an \"Internal Service Error\" after PayPal login!\n *     //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal\n *   })).then(() => {\n *     let payment = new PayPalPayment('3.33', 'USD', 'Description', 'sale');\n *     this.payPal.renderSinglePaymentUI(payment).then(() => {\n *       // Successfully paid\n *\n *       // Example sandbox response\n *       //\n *       // {\n *       //   \"client\": {\n *       //     \"environment\": \"sandbox\",\n *       //     \"product_name\": \"PayPal iOS SDK\",\n *       //     \"paypal_sdk_version\": \"2.16.0\",\n *       //     \"platform\": \"iOS\"\n *       //   },\n *       //   \"response_type\": \"payment\",\n *       //   \"response\": {\n *       //     \"id\": \"PAY-1AB23456CD789012EF34GHIJ\",\n *       //     \"state\": \"approved\",\n *       //     \"create_time\": \"2016-10-03T13:33:33Z\",\n *       //     \"intent\": \"sale\"\n *       //   }\n *       // }\n *     }, () => {\n *       // Error or render dialog closed without being successful\n *     });\n *   }, () => {\n *     // Error in configuration\n *   });\n * }, () => {\n *   // Error in initialization, maybe PayPal isn't supported or something else\n * });\n * ```\n * @interfaces\n * PayPalEnvironment\n * PayPalConfigurationOptions\n * @classes\n * PayPalPayment\n * PayPalItem\n * PayPalPaymentDetails\n * PayPalShippingAddress\n */\nexport declare class PayPal extends IonicNativePlugin {\n    /**\n     * Retrieve the version of the PayPal iOS SDK library. Useful when contacting support.\n     * @returns {Promise<string>}\n     */\n    version(): Promise<string>;\n    /**\n     * You must preconnect to PayPal to prepare the device for processing payments.\n     * This improves the user experience, by making the presentation of the\n     * UI faster. The preconnect is valid for a limited time, so\n     * the recommended time to preconnect is on page load.\n     *\n     * @param {PayPalEnvironment} clientIdsForEnvironments: set of client ids for environments\n     * @returns {Promise<any>}\n     */\n    init(clientIdsForEnvironments: PayPalEnvironment): Promise<any>;\n    /**\n     * You must preconnect to PayPal to prepare the device for processing payments.\n     * This improves the user experience, by making the presentation of the UI faster.\n     * The preconnect is valid for a limited time, so the recommended time to preconnect is on page load.\n     *\n     * @param {String} environment: available options are \"PayPalEnvironmentNoNetwork\", \"PayPalEnvironmentProduction\" and \"PayPalEnvironmentSandbox\"\n     * @param {PayPalConfiguration} configuration: PayPalConfiguration object, for Future Payments merchantName, merchantPrivacyPolicyURL and merchantUserAgreementURL must be set be set\n     * @returns {Promise<any>}\n     */\n    prepareToRender(environment: string, configuration: PayPalConfiguration): Promise<any>;\n    /**\n     * Start PayPal UI to collect payment from the user.\n     * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/ios-integration-guide/\n     * for more documentation of the params.\n     *\n     * @param {PayPalPayment} payment PayPalPayment object\n     * @returns {Promise<any>}\n     */\n    renderSinglePaymentUI(payment: PayPalPayment): Promise<any>;\n    /**\n     * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment\n     * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the\n     * payment is originating from a valid, user-consented device+application.\n     * This helps reduce fraud and decrease declines.\n     * This method MUST be called prior to initiating a pre-consented payment (a \"future payment\") from a mobile device.\n     * Pass the result to your server, to include in the payment request sent to PayPal.\n     * Do not otherwise cache or store this value.\n     * @returns {Promise<any>}\n     */\n    clientMetadataID(): Promise<any>;\n    /**\n     * Please Read Docs on Future Payments at https://github.com/paypal/PayPal-iOS-SDK#future-payments\n     * @returns {Promise<any>}\n     */\n    renderFuturePaymentUI(): Promise<any>;\n    /**\n     * Please Read Docs on Profile Sharing at https://github.com/paypal/PayPal-iOS-SDK#profile-sharing\n     *\n     * @param {string[]} scopes scopes Set of requested scope-values. Accepted scopes are: openid, profile, address, email, phone, futurepayments and paypalattributes\n     * See https://developer.paypal.com/docs/integration/direct/identity/attributes/ for more details\n     * @returns {Promise<any>}\n     */\n    renderProfileSharingUI(scopes: string[]): Promise<any>;\n}\nexport interface PayPalEnvironment {\n    PayPalEnvironmentProduction: string;\n    PayPalEnvironmentSandbox: string;\n}\n/**\n * @hidden\n */\nexport declare class PayPalPayment {\n    constructor(amount: string, currency: string, shortDescription: string, intent: string, details?: PayPalPaymentDetails);\n    /**\n     * The amount of the payment.\n     */\n    amount: string;\n    /**\n     * The ISO 4217 currency for the payment.\n     */\n    currency: string;\n    /**\n     * A short description of the payment.\n     */\n    shortDescription: string;\n    /**\n     * \"Sale\" for an immediate payment.\n     */\n    intent: string;\n    /**\n     * Optional Build Notation code (\"BN code\"), obtained from partnerprogram@paypal.com,\n     * for your tracking purposes.\n     */\n    bnCode: string;\n    /**\n     * Optional invoice number, for your tracking purposes. (up to 256 characters)\n     */\n    invoiceNumber: string;\n    /**\n     * Optional text, for your tracking purposes. (up to 256 characters)\n     */\n    custom: string;\n    /**\n     * Optional text which will appear on the customer's credit card statement. (up to 22 characters)\n     */\n    softDescriptor: string;\n    /**\n     * Optional array of PayPalItem objects.\n     */\n    items: PayPalItem[];\n    /**\n     * Optional payee email, if your app is paying a third-party merchant.\n     * The payee's email. It must be a valid PayPal email address.\n     */\n    payeeEmail: string;\n    /**\n     * Optional customer shipping address, if your app wishes to provide this to the SDK.\n     */\n    shippingAddress: string;\n    /**\n     * Optional PayPalPaymentDetails object\n     */\n    details: PayPalPaymentDetails;\n}\n/**\n * @hidden\n */\nexport declare class PayPalItem {\n    /**\n     * The PayPalItem class defines an optional itemization for a payment.\n     * @see https://developer.paypal.com/docs/api/#item-object for more details.\n     * @param {String} name: Name of the item. 127 characters max\n     * @param {Number} quantity: Number of units. 10 characters max.\n     * @param {String} price: Unit price for this item 10 characters max.\n     * May be negative for \"coupon\" etc\n     * @param {String} currency: ISO standard currency code.\n     * @param {String} sku: The stock keeping unit for this item. 50 characters max (optional)\n     */\n    constructor(name: string, quantity: number, price: string, currency: string, sku?: string);\n    /**\n     * Name of the item. 127 characters max\n     */\n    name: string;\n    /**\n     * Number of units. 10 characters max.\n     */\n    quantity: number;\n    /**\n     * Unit price for this item 10 characters max.\n     */\n    price: string;\n    /**\n     * ISO standard currency code.\n     */\n    currency: string;\n    /**\n     * The stock keeping unit for this item. 50 characters max (optional)\n     */\n    sku?: string;\n}\n/**\n * @hidden\n */\nexport declare class PayPalPaymentDetails {\n    /**\n     * Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\n     */\n    subtotal: string;\n    /**\n     * Amount charged for shipping. 10 characters max with support for 2 decimal places.\n     */\n    shipping: string;\n    /**\n     * Amount charged for tax. 10 characters max with support for 2 decimal places.\n     */\n    tax: string;\n    /**\n     * The PayPalPaymentDetails class defines optional amount details.\n     * @param {String} subtotal: Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\n     * @param {String} shipping: Amount charged for shipping. 10 characters max with support for 2 decimal places.\n     * @param {String} tax: Amount charged for tax. 10 characters max with support for 2 decimal places.\n     */\n    constructor(subtotal: string, shipping: string, tax: string);\n}\n/**\n * @hidden\n */\nexport interface PayPalConfigurationOptions {\n    /**\n     * Will be overridden by email used in most recent PayPal login.\n     */\n    defaultUserEmail?: string;\n    /**\n     * Will be overridden by phone country code used in most recent PayPal login\n     */\n    defaultUserPhoneCountryCode?: string;\n    /**\n     * Will be overridden by phone number used in most recent PayPal login.\n     */\n    defaultUserPhoneNumber?: string;\n    /**\n     * Your company name, as it should be displayed to the user when requesting consent via a PayPalFuturePaymentViewController.\n     */\n    merchantName?: string;\n    /**\n     * URL of your company's privacy policy, which will be offered to the user when requesting consent via a PayPalFuturePaymentViewController.\n     */\n    merchantPrivacyPolicyURL?: string;\n    /**\n     * URL of your company's user agreement, which will be offered to the user when requesting consent via a PayPalFuturePaymentViewController.\n     */\n    merchantUserAgreementURL?: string;\n    /**\n     * If set to NO, the SDK will only support paying with PayPal, not with credit cards.\n     * This applies only to single payments (via PayPalPaymentViewController).\n     * Future payments (via PayPalFuturePaymentViewController) always use PayPal.\n     * Defaults to true\n     */\n    acceptCreditCards?: boolean;\n    /**\n     * For single payments, options for the shipping address.\n     * - 0 - PayPalShippingAddressOptionNone: no shipping address applies.\n     * - 1 - PayPalShippingAddressOptionProvided: shipping address will be provided by your app,\n     *   in the shippingAddress property of PayPalPayment.\n     * - 2 - PayPalShippingAddressOptionPayPal: user will choose from shipping addresses on file\n     *   for their PayPal account.\n     * - 3 - PayPalShippingAddressOptionBoth: user will choose from the shipping address provided by your app,\n     *   in the shippingAddress property of PayPalPayment, plus the shipping addresses on file for the user's PayPal account.\n     * Defaults to 0 (PayPalShippingAddressOptionNone).\n     */\n    payPalShippingAddressOption?: number;\n    /**\n     * If set to YES, then if the user pays via their PayPal account,\n     * the SDK will remember the user's PayPal username or phone number;\n     * if the user pays via their credit card, then the SDK will remember\n     * the PayPal Vault token representing the user's credit card.\n     *\n     * If set to NO, then any previously-remembered username, phone number, or\n     * credit card token will be erased, and subsequent payment information will\n     * not be remembered.\n     *\n     * Defaults to YES.\n     */\n    rememberUser?: boolean;\n    /**\n     * If not set, or if set to nil, defaults to the device's current language setting.\n     *\n     * Can be specified as a language code (\"en\", \"fr\", \"zh-Hans\", etc.) or as a locale (\"en_AU\", \"fr_FR\", \"zh-Hant_HK\", etc.).\n     * If the library does not contain localized strings for a specified locale, then will fall back to the language. E.g., \"es_CO\" -> \"es\".\n     * If the library does not contain localized strings for a specified language, then will fall back to American English.\n     *\n     * If you specify only a language code, and that code matches the device's currently preferred language,\n     * then the library will attempt to use the device's current region as well.\n     * E.g., specifying \"en\" on a device set to \"English\" and \"United Kingdom\" will result in \"en_GB\".\n     */\n    languageOrLocale?: string;\n    /**\n     * Normally, the SDK blurs the screen when the app is backgrounded,\n     * to obscure credit card or PayPal account details in the iOS-saved screenshot.\n     * If your app already does its own blurring upon backgrounding, you might choose to disable this.\n     * Defaults to NO.\n     */\n    disableBlurWhenBackgrounding?: boolean;\n    /**\n     * If you will present the SDK's view controller within a popover, then set this property to YES.\n     * Defaults to NO. (iOS only)\n     */\n    presentingInPopover?: boolean;\n    /**\n     * Sandbox credentials can be difficult to type on a mobile device. Setting this flag to YES will\n     * cause the sandboxUserPassword and sandboxUserPin to always be pre-populated into login fields.\n     */\n    forceDefaultsInSandbox?: boolean;\n    /**\n     * Password to use for sandbox if 'forceDefaultsInSandbox' is set.\n     */\n    sandboxUserPassword?: string;\n    /**\n     * PIN to use for sandbox if 'forceDefaultsInSandbox' is set.\n     */\n    sandboxUserPin?: string;\n    /**\n     * @hidden\n     */\n    [key: string]: any;\n}\n/**\n * @hidden\n */\nexport declare class PayPalConfiguration implements PayPalConfigurationOptions {\n    /**\n     * You use a PayPalConfiguration object to configure many aspects of how the SDK behaves.\n     * see defaults for options available\n     */\n    constructor(options?: PayPalConfigurationOptions);\n}\n/**\n * @hidden\n */\nexport declare class PayPalShippingAddress {\n    /**\n     * See the documentation of the individual properties for more detail.\n     * @param {String} recipientName: Name of the recipient at this address. 50 characters max.\n     * @param {String} line1: Line 1 of the address (e.g., Number, street, etc). 100 characters max.\n     * @param {String} line2: Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\n     * @param {String} city: City name. 50 characters max.\n     * @param {String} state: 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\n     * @param {String} postalCode: ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\n     * @param {String} countryCode: 2-letter country code. 2 characters max.\n     */\n    constructor(recipientName: string, line1: string, line2: string, city: string, state: string, postalCode: string, countryCode: string);\n    /**\n     * Name of the recipient at this address. 50 characters max.\n     */\n    recipientName: string;\n    /**\n     * Line 1 of the address (e.g., Number, street, etc). 100 characters max.\n     */\n    line1: string;\n    /**\n     * Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\n     */\n    line2: string;\n    /**\n     * City name. 50 characters max.\n     */\n    city: string;\n    /**\n     * 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\n     */\n    state: string;\n    /**\n     * ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\n     */\n    postalCode: string;\n    /**\n     * 2-letter country code. 2 characters max.\n     */\n    countryCode: string;\n}\n"]}