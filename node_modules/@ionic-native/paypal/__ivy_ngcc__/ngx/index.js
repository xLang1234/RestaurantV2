import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var PayPal = /** @class */ (function (_super) {
    __extends(PayPal, _super);
    function PayPal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PayPal.prototype.version = function () { return cordova(this, "version", {}, arguments); };
    PayPal.prototype.init = function (clientIdsForEnvironments) { return cordova(this, "init", {}, arguments); };
    PayPal.prototype.prepareToRender = function (environment, configuration) { return cordova(this, "prepareToRender", {}, arguments); };
    PayPal.prototype.renderSinglePaymentUI = function (payment) { return cordova(this, "renderSinglePaymentUI", {}, arguments); };
    PayPal.prototype.clientMetadataID = function () { return cordova(this, "clientMetadataID", {}, arguments); };
    PayPal.prototype.renderFuturePaymentUI = function () { return cordova(this, "renderFuturePaymentUI", {}, arguments); };
    PayPal.prototype.renderProfileSharingUI = function (scopes) { return cordova(this, "renderProfileSharingUI", {}, arguments); };
    PayPal.pluginName = "PayPal";
    PayPal.plugin = "com.paypal.cordova.mobilesdk";
    PayPal.pluginRef = "PayPalMobile";
    PayPal.repo = "https://github.com/paypal/PayPal-Cordova-Plugin";
    PayPal.platforms = ["Android", "iOS"];
PayPal.ɵfac = function PayPal_Factory(t) { return ɵPayPal_BaseFactory(t || PayPal); };
PayPal.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: PayPal, factory: function (t) { return PayPal.ɵfac(t); } });
var ɵPayPal_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(PayPal);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PayPal, [{
        type: Injectable
    }], null, null); })();
    return PayPal;
}(IonicNativePlugin));
export { PayPal };
var PayPalPayment = /** @class */ (function () {
    function PayPalPayment(amount, currency, shortDescription, intent, details) {
        /**
         * Optional Build Notation code ("BN code"), obtained from partnerprogram@paypal.com,
         * for your tracking purposes.
         */
        this.bnCode = 'PhoneGap_SP';
        this.amount = amount;
        this.currency = currency;
        this.shortDescription = shortDescription;
        this.intent = intent;
        this.details = details;
    }
    return PayPalPayment;
}());
export { PayPalPayment };
var PayPalItem = /** @class */ (function () {
    /**
     * The PayPalItem class defines an optional itemization for a payment.
     * @see https://developer.paypal.com/docs/api/#item-object for more details.
     * @param {String} name: Name of the item. 127 characters max
     * @param {Number} quantity: Number of units. 10 characters max.
     * @param {String} price: Unit price for this item 10 characters max.
     * May be negative for "coupon" etc
     * @param {String} currency: ISO standard currency code.
     * @param {String} sku: The stock keeping unit for this item. 50 characters max (optional)
     */
    function PayPalItem(name, quantity, price, currency, sku) {
        this.name = name;
        this.quantity = quantity;
        this.price = price;
        this.currency = currency;
        this.sku = sku;
    }
    return PayPalItem;
}());
export { PayPalItem };
var PayPalPaymentDetails = /** @class */ (function () {
    /**
     * The PayPalPaymentDetails class defines optional amount details.
     * @param {String} subtotal: Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.
     * @param {String} shipping: Amount charged for shipping. 10 characters max with support for 2 decimal places.
     * @param {String} tax: Amount charged for tax. 10 characters max with support for 2 decimal places.
     */
    function PayPalPaymentDetails(subtotal, shipping, tax) {
        this.subtotal = subtotal;
        this.shipping = shipping;
        this.tax = tax;
    }
    return PayPalPaymentDetails;
}());
export { PayPalPaymentDetails };
var PayPalConfiguration = /** @class */ (function () {
    /**
     * You use a PayPalConfiguration object to configure many aspects of how the SDK behaves.
     * see defaults for options available
     */
    function PayPalConfiguration(options) {
        var defaults = {
            defaultUserEmail: null,
            defaultUserPhoneCountryCode: null,
            defaultUserPhoneNumber: null,
            merchantName: null,
            merchantPrivacyPolicyURL: null,
            merchantUserAgreementURL: null,
            acceptCreditCards: true,
            payPalShippingAddressOption: 0,
            rememberUser: true,
            languageOrLocale: null,
            disableBlurWhenBackgrounding: false,
            presentingInPopover: false,
            forceDefaultsInSandbox: false,
            sandboxUserPassword: null,
            sandboxUserPin: null,
        };
        if (options && typeof options === 'object') {
            for (var i in options) {
                if (defaults.hasOwnProperty(i)) {
                    defaults[i] = options[i];
                }
            }
        }
        return defaults;
    }
    return PayPalConfiguration;
}());
export { PayPalConfiguration };
var PayPalShippingAddress = /** @class */ (function () {
    /**
     * See the documentation of the individual properties for more detail.
     * @param {String} recipientName: Name of the recipient at this address. 50 characters max.
     * @param {String} line1: Line 1 of the address (e.g., Number, street, etc). 100 characters max.
     * @param {String} line2: Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.
     * @param {String} city: City name. 50 characters max.
     * @param {String} state: 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.
     * @param {String} postalCode: ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.
     * @param {String} countryCode: 2-letter country code. 2 characters max.
     */
    function PayPalShippingAddress(recipientName, line1, line2, city, state, postalCode, countryCode) {
        this.recipientName = recipientName;
        this.line1 = line1;
        this.line2 = line2;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.countryCode = countryCode;
    }
    return PayPalShippingAddress;
}());
export { PayPalShippingAddress };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvcGF5cGFsL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztBQUN4RTtBQUlXLElBb0VpQiwwQkFBaUI7QUFBQztBQUU5QjtBQUNoQjtBQUFNLElBR0osd0JBQU87QUFLYyxJQVNyQixxQkFBSSxhQUFDLHdCQUEyQztBQUt2QyxJQVNULGdDQUFlLGFBQUMsV0FBbUIsRUFBRSxhQUFrQztBQUtuRCxJQVFwQixzQ0FBcUIsYUFBQyxPQUFzQjtBQUtsQixJQVUxQixpQ0FBZ0I7QUFLaUIsSUFJakMsc0NBQXFCO0FBS2lCLElBT3RDLHVDQUFzQixhQUFDLE1BQWdCO0FBS1I7QUFDSDtBQUs5QjtBQUV3QjtBQUlqQjtJQXBHTSxNQUFNLHdCQURsQixVQUFVLEVBQUUsUUFDQSxNQUFNOzs7OzswQkFBRTtBQUFDLGlCQTFFdEI7QUFBRSxFQTBFMEIsaUJBQWlCO0FBQzVDLFNBRFksTUFBTTtBQUFJO0FBRUwsSUErRmhCLHVCQUNFLE1BQWMsRUFDZCxRQUFnQixFQUNoQixnQkFBd0IsRUFDeEIsTUFBYyxFQUNkLE9BQThCO0FBQy9CLFFBd0JEO0FBQ0Y7QUFDTTtBQUVBLFdBREQ7QUFDTCxRQUFFLFdBQU0sR0FBRyxhQUFhLENBQUM7QUFDekIsUUE1QkksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDekIsUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztBQUM3QixRQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztBQUM3QyxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3pCLFFBQUksSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7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QUNyQixRQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3ZCLFFBQUksSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDakMsUUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSCxnQ0FyZUE7QUFBRTtBQUFNO0FBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgUGF5UGFsXG4gKiBAZGVzY3JpcHRpb25cbiAqIFBheVBhbCBwbHVnaW4gZm9yIENvcmRvdmEvSW9uaWMgQXBwbGljYXRpb25zXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBQYXlQYWwsIFBheVBhbFBheW1lbnQsIFBheVBhbENvbmZpZ3VyYXRpb24gfSBmcm9tICdAaW9uaWMtbmF0aXZlL3BheXBhbC9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5UGFsOiBQYXlQYWwpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLnBheVBhbC5pbml0KHtcbiAqICAgUGF5UGFsRW52aXJvbm1lbnRQcm9kdWN0aW9uOiAnWU9VUl9QUk9EVUNUSU9OX0NMSUVOVF9JRCcsXG4gKiAgIFBheVBhbEVudmlyb25tZW50U2FuZGJveDogJ1lPVVJfU0FOREJPWF9DTElFTlRfSUQnXG4gKiB9KS50aGVuKCgpID0+IHtcbiAqICAgLy8gRW52aXJvbm1lbnRzOiBQYXlQYWxFbnZpcm9ubWVudE5vTmV0d29yaywgUGF5UGFsRW52aXJvbm1lbnRTYW5kYm94LCBQYXlQYWxFbnZpcm9ubWVudFByb2R1Y3Rpb25cbiAqICAgdGhpcy5wYXlQYWwucHJlcGFyZVRvUmVuZGVyKCdQYXlQYWxFbnZpcm9ubWVudFNhbmRib3gnLCBuZXcgUGF5UGFsQ29uZmlndXJhdGlvbih7XG4gKiAgICAgLy8gT25seSBuZWVkZWQgaWYgeW91IGdldCBhbiBcIkludGVybmFsIFNlcnZpY2UgRXJyb3JcIiBhZnRlciBQYXlQYWwgbG9naW4hXG4gKiAgICAgLy9wYXlQYWxTaGlwcGluZ0FkZHJlc3NPcHRpb246IDIgLy8gUGF5UGFsU2hpcHBpbmdBZGRyZXNzT3B0aW9uUGF5UGFsXG4gKiAgIH0pKS50aGVuKCgpID0+IHtcbiAqICAgICBsZXQgcGF5bWVudCA9IG5ldyBQYXlQYWxQYXltZW50KCczLjMzJywgJ1VTRCcsICdEZXNjcmlwdGlvbicsICdzYWxlJyk7XG4gKiAgICAgdGhpcy5wYXlQYWwucmVuZGVyU2luZ2xlUGF5bWVudFVJKHBheW1lbnQpLnRoZW4oKCkgPT4ge1xuICogICAgICAgLy8gU3VjY2Vzc2Z1bGx5IHBhaWRcbiAqXG4gKiAgICAgICAvLyBFeGFtcGxlIHNhbmRib3ggcmVzcG9uc2VcbiAqICAgICAgIC8vXG4gKiAgICAgICAvLyB7XG4gKiAgICAgICAvLyAgIFwiY2xpZW50XCI6IHtcbiAqICAgICAgIC8vICAgICBcImVudmlyb25tZW50XCI6IFwic2FuZGJveFwiLFxuICogICAgICAgLy8gICAgIFwicHJvZHVjdF9uYW1lXCI6IFwiUGF5UGFsIGlPUyBTREtcIixcbiAqICAgICAgIC8vICAgICBcInBheXBhbF9zZGtfdmVyc2lvblwiOiBcIjIuMTYuMFwiLFxuICogICAgICAgLy8gICAgIFwicGxhdGZvcm1cIjogXCJpT1NcIlxuICogICAgICAgLy8gICB9LFxuICogICAgICAgLy8gICBcInJlc3BvbnNlX3R5cGVcIjogXCJwYXltZW50XCIsXG4gKiAgICAgICAvLyAgIFwicmVzcG9uc2VcIjoge1xuICogICAgICAgLy8gICAgIFwiaWRcIjogXCJQQVktMUFCMjM0NTZDRDc4OTAxMkVGMzRHSElKXCIsXG4gKiAgICAgICAvLyAgICAgXCJzdGF0ZVwiOiBcImFwcHJvdmVkXCIsXG4gKiAgICAgICAvLyAgICAgXCJjcmVhdGVfdGltZVwiOiBcIjIwMTYtMTAtMDNUMTM6MzM6MzNaXCIsXG4gKiAgICAgICAvLyAgICAgXCJpbnRlbnRcIjogXCJzYWxlXCJcbiAqICAgICAgIC8vICAgfVxuICogICAgICAgLy8gfVxuICogICAgIH0sICgpID0+IHtcbiAqICAgICAgIC8vIEVycm9yIG9yIHJlbmRlciBkaWFsb2cgY2xvc2VkIHdpdGhvdXQgYmVpbmcgc3VjY2Vzc2Z1bFxuICogICAgIH0pO1xuICogICB9LCAoKSA9PiB7XG4gKiAgICAgLy8gRXJyb3IgaW4gY29uZmlndXJhdGlvblxuICogICB9KTtcbiAqIH0sICgpID0+IHtcbiAqICAgLy8gRXJyb3IgaW4gaW5pdGlhbGl6YXRpb24sIG1heWJlIFBheVBhbCBpc24ndCBzdXBwb3J0ZWQgb3Igc29tZXRoaW5nIGVsc2VcbiAqIH0pO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogUGF5UGFsRW52aXJvbm1lbnRcbiAqIFBheVBhbENvbmZpZ3VyYXRpb25PcHRpb25zXG4gKiBAY2xhc3Nlc1xuICogUGF5UGFsUGF5bWVudFxuICogUGF5UGFsSXRlbVxuICogUGF5UGFsUGF5bWVudERldGFpbHNcbiAqIFBheVBhbFNoaXBwaW5nQWRkcmVzc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1BheVBhbCcsXG4gIHBsdWdpbjogJ2NvbS5wYXlwYWwuY29yZG92YS5tb2JpbGVzZGsnLFxuICBwbHVnaW5SZWY6ICdQYXlQYWxNb2JpbGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3BheXBhbC9QYXlQYWwtQ29yZG92YS1QbHVnaW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGF5UGFsIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmV0cmlldmUgdGhlIHZlcnNpb24gb2YgdGhlIFBheVBhbCBpT1MgU0RLIGxpYnJhcnkuIFVzZWZ1bCB3aGVuIGNvbnRhY3Rpbmcgc3VwcG9ydC5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmVyc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBZb3UgbXVzdCBwcmVjb25uZWN0IHRvIFBheVBhbCB0byBwcmVwYXJlIHRoZSBkZXZpY2UgZm9yIHByb2Nlc3NpbmcgcGF5bWVudHMuXG4gICAqIFRoaXMgaW1wcm92ZXMgdGhlIHVzZXIgZXhwZXJpZW5jZSwgYnkgbWFraW5nIHRoZSBwcmVzZW50YXRpb24gb2YgdGhlXG4gICAqIFVJIGZhc3Rlci4gVGhlIHByZWNvbm5lY3QgaXMgdmFsaWQgZm9yIGEgbGltaXRlZCB0aW1lLCBzb1xuICAgKiB0aGUgcmVjb21tZW5kZWQgdGltZSB0byBwcmVjb25uZWN0IGlzIG9uIHBhZ2UgbG9hZC5cbiAgICpcbiAgICogQHBhcmFtIHtQYXlQYWxFbnZpcm9ubWVudH0gY2xpZW50SWRzRm9yRW52aXJvbm1lbnRzOiBzZXQgb2YgY2xpZW50IGlkcyBmb3IgZW52aXJvbm1lbnRzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluaXQoY2xpZW50SWRzRm9yRW52aXJvbm1lbnRzOiBQYXlQYWxFbnZpcm9ubWVudCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBtdXN0IHByZWNvbm5lY3QgdG8gUGF5UGFsIHRvIHByZXBhcmUgdGhlIGRldmljZSBmb3IgcHJvY2Vzc2luZyBwYXltZW50cy5cbiAgICogVGhpcyBpbXByb3ZlcyB0aGUgdXNlciBleHBlcmllbmNlLCBieSBtYWtpbmcgdGhlIHByZXNlbnRhdGlvbiBvZiB0aGUgVUkgZmFzdGVyLlxuICAgKiBUaGUgcHJlY29ubmVjdCBpcyB2YWxpZCBmb3IgYSBsaW1pdGVkIHRpbWUsIHNvIHRoZSByZWNvbW1lbmRlZCB0aW1lIHRvIHByZWNvbm5lY3QgaXMgb24gcGFnZSBsb2FkLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZW52aXJvbm1lbnQ6IGF2YWlsYWJsZSBvcHRpb25zIGFyZSBcIlBheVBhbEVudmlyb25tZW50Tm9OZXR3b3JrXCIsIFwiUGF5UGFsRW52aXJvbm1lbnRQcm9kdWN0aW9uXCIgYW5kIFwiUGF5UGFsRW52aXJvbm1lbnRTYW5kYm94XCJcbiAgICogQHBhcmFtIHtQYXlQYWxDb25maWd1cmF0aW9ufSBjb25maWd1cmF0aW9uOiBQYXlQYWxDb25maWd1cmF0aW9uIG9iamVjdCwgZm9yIEZ1dHVyZSBQYXltZW50cyBtZXJjaGFudE5hbWUsIG1lcmNoYW50UHJpdmFjeVBvbGljeVVSTCBhbmQgbWVyY2hhbnRVc2VyQWdyZWVtZW50VVJMIG11c3QgYmUgc2V0IGJlIHNldFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBwcmVwYXJlVG9SZW5kZXIoZW52aXJvbm1lbnQ6IHN0cmluZywgY29uZmlndXJhdGlvbjogUGF5UGFsQ29uZmlndXJhdGlvbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IFBheVBhbCBVSSB0byBjb2xsZWN0IHBheW1lbnQgZnJvbSB0aGUgdXNlci5cbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vd2ViYXBwcy9kZXZlbG9wZXIvZG9jcy9pbnRlZ3JhdGlvbi9tb2JpbGUvaW9zLWludGVncmF0aW9uLWd1aWRlL1xuICAgKiBmb3IgbW9yZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBwYXJhbXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UGF5UGFsUGF5bWVudH0gcGF5bWVudCBQYXlQYWxQYXltZW50IG9iamVjdFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZW5kZXJTaW5nbGVQYXltZW50VUkocGF5bWVudDogUGF5UGFsUGF5bWVudCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIE9uY2UgYSB1c2VyIGhhcyBjb25zZW50ZWQgdG8gZnV0dXJlIHBheW1lbnRzLCB3aGVuIHRoZSB1c2VyIHN1YnNlcXVlbnRseSBpbml0aWF0ZXMgYSBQYXlQYWwgcGF5bWVudFxuICAgKiBmcm9tIHRoZWlyIGRldmljZSB0byBiZSBjb21wbGV0ZWQgYnkgeW91ciBzZXJ2ZXIsIFBheVBhbCB1c2VzIGEgQ29ycmVsYXRpb24gSUQgdG8gdmVyaWZ5IHRoYXQgdGhlXG4gICAqIHBheW1lbnQgaXMgb3JpZ2luYXRpbmcgZnJvbSBhIHZhbGlkLCB1c2VyLWNvbnNlbnRlZCBkZXZpY2UrYXBwbGljYXRpb24uXG4gICAqIFRoaXMgaGVscHMgcmVkdWNlIGZyYXVkIGFuZCBkZWNyZWFzZSBkZWNsaW5lcy5cbiAgICogVGhpcyBtZXRob2QgTVVTVCBiZSBjYWxsZWQgcHJpb3IgdG8gaW5pdGlhdGluZyBhIHByZS1jb25zZW50ZWQgcGF5bWVudCAoYSBcImZ1dHVyZSBwYXltZW50XCIpIGZyb20gYSBtb2JpbGUgZGV2aWNlLlxuICAgKiBQYXNzIHRoZSByZXN1bHQgdG8geW91ciBzZXJ2ZXIsIHRvIGluY2x1ZGUgaW4gdGhlIHBheW1lbnQgcmVxdWVzdCBzZW50IHRvIFBheVBhbC5cbiAgICogRG8gbm90IG90aGVyd2lzZSBjYWNoZSBvciBzdG9yZSB0aGlzIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGllbnRNZXRhZGF0YUlEKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBsZWFzZSBSZWFkIERvY3Mgb24gRnV0dXJlIFBheW1lbnRzIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9wYXlwYWwvUGF5UGFsLWlPUy1TREsjZnV0dXJlLXBheW1lbnRzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlbmRlckZ1dHVyZVBheW1lbnRVSSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGVhc2UgUmVhZCBEb2NzIG9uIFByb2ZpbGUgU2hhcmluZyBhdCBodHRwczovL2dpdGh1Yi5jb20vcGF5cGFsL1BheVBhbC1pT1MtU0RLI3Byb2ZpbGUtc2hhcmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBzY29wZXMgc2NvcGVzIFNldCBvZiByZXF1ZXN0ZWQgc2NvcGUtdmFsdWVzLiBBY2NlcHRlZCBzY29wZXMgYXJlOiBvcGVuaWQsIHByb2ZpbGUsIGFkZHJlc3MsIGVtYWlsLCBwaG9uZSwgZnV0dXJlcGF5bWVudHMgYW5kIHBheXBhbGF0dHJpYnV0ZXNcbiAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLnBheXBhbC5jb20vZG9jcy9pbnRlZ3JhdGlvbi9kaXJlY3QvaWRlbnRpdHkvYXR0cmlidXRlcy8gZm9yIG1vcmUgZGV0YWlsc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZW5kZXJQcm9maWxlU2hhcmluZ1VJKHNjb3Blczogc3RyaW5nW10pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbEVudmlyb25tZW50IHtcbiAgUGF5UGFsRW52aXJvbm1lbnRQcm9kdWN0aW9uOiBzdHJpbmc7XG4gIFBheVBhbEVudmlyb25tZW50U2FuZGJveDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFBheVBhbFBheW1lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBhbW91bnQ6IHN0cmluZyxcbiAgICBjdXJyZW5jeTogc3RyaW5nLFxuICAgIHNob3J0RGVzY3JpcHRpb246IHN0cmluZyxcbiAgICBpbnRlbnQ6IHN0cmluZyxcbiAgICBkZXRhaWxzPzogUGF5UGFsUGF5bWVudERldGFpbHNcbiAgKSB7XG4gICAgdGhpcy5hbW91bnQgPSBhbW91bnQ7XG4gICAgdGhpcy5jdXJyZW5jeSA9IGN1cnJlbmN5O1xuICAgIHRoaXMuc2hvcnREZXNjcmlwdGlvbiA9IHNob3J0RGVzY3JpcHRpb247XG4gICAgdGhpcy5pbnRlbnQgPSBpbnRlbnQ7XG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IG9mIHRoZSBwYXltZW50LlxuICAgKi9cbiAgYW1vdW50OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgSVNPIDQyMTcgY3VycmVuY3kgZm9yIHRoZSBwYXltZW50LlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcbiAgLyoqXG4gICAqIEEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIHBheW1lbnQuXG4gICAqL1xuICBzaG9ydERlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBcIlNhbGVcIiBmb3IgYW4gaW1tZWRpYXRlIHBheW1lbnQuXG4gICAqL1xuICBpbnRlbnQ6IHN0cmluZztcbiAgLyoqXG4gICAqIE9wdGlvbmFsIEJ1aWxkIE5vdGF0aW9uIGNvZGUgKFwiQk4gY29kZVwiKSwgb2J0YWluZWQgZnJvbSBwYXJ0bmVycHJvZ3JhbUBwYXlwYWwuY29tLFxuICAgKiBmb3IgeW91ciB0cmFja2luZyBwdXJwb3Nlcy5cbiAgICovXG4gIGJuQ29kZSA9ICdQaG9uZUdhcF9TUCc7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBpbnZvaWNlIG51bWJlciwgZm9yIHlvdXIgdHJhY2tpbmcgcHVycG9zZXMuICh1cCB0byAyNTYgY2hhcmFjdGVycylcbiAgICovXG4gIGludm9pY2VOdW1iZXI6IHN0cmluZztcbiAgLyoqXG4gICAqIE9wdGlvbmFsIHRleHQsIGZvciB5b3VyIHRyYWNraW5nIHB1cnBvc2VzLiAodXAgdG8gMjU2IGNoYXJhY3RlcnMpXG4gICAqL1xuICBjdXN0b206IHN0cmluZztcbiAgLyoqXG4gICAqIE9wdGlvbmFsIHRleHQgd2hpY2ggd2lsbCBhcHBlYXIgb24gdGhlIGN1c3RvbWVyJ3MgY3JlZGl0IGNhcmQgc3RhdGVtZW50LiAodXAgdG8gMjIgY2hhcmFjdGVycylcbiAgICovXG4gIHNvZnREZXNjcmlwdG9yOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBhcnJheSBvZiBQYXlQYWxJdGVtIG9iamVjdHMuXG4gICAqL1xuICBpdGVtczogUGF5UGFsSXRlbVtdO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBwYXllZSBlbWFpbCwgaWYgeW91ciBhcHAgaXMgcGF5aW5nIGEgdGhpcmQtcGFydHkgbWVyY2hhbnQuXG4gICAqIFRoZSBwYXllZSdzIGVtYWlsLiBJdCBtdXN0IGJlIGEgdmFsaWQgUGF5UGFsIGVtYWlsIGFkZHJlc3MuXG4gICAqL1xuICBwYXllZUVtYWlsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBjdXN0b21lciBzaGlwcGluZyBhZGRyZXNzLCBpZiB5b3VyIGFwcCB3aXNoZXMgdG8gcHJvdmlkZSB0aGlzIHRvIHRoZSBTREsuXG4gICAqL1xuICBzaGlwcGluZ0FkZHJlc3M6IHN0cmluZztcbiAgLyoqXG4gICAqIE9wdGlvbmFsIFBheVBhbFBheW1lbnREZXRhaWxzIG9iamVjdFxuICAgKi9cbiAgZGV0YWlsczogUGF5UGFsUGF5bWVudERldGFpbHM7XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY2xhc3MgUGF5UGFsSXRlbSB7XG4gIC8qKlxuICAgKiBUaGUgUGF5UGFsSXRlbSBjbGFzcyBkZWZpbmVzIGFuIG9wdGlvbmFsIGl0ZW1pemF0aW9uIGZvciBhIHBheW1lbnQuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIucGF5cGFsLmNvbS9kb2NzL2FwaS8jaXRlbS1vYmplY3QgZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWU6IE5hbWUgb2YgdGhlIGl0ZW0uIDEyNyBjaGFyYWN0ZXJzIG1heFxuICAgKiBAcGFyYW0ge051bWJlcn0gcXVhbnRpdHk6IE51bWJlciBvZiB1bml0cy4gMTAgY2hhcmFjdGVycyBtYXguXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcmljZTogVW5pdCBwcmljZSBmb3IgdGhpcyBpdGVtIDEwIGNoYXJhY3RlcnMgbWF4LlxuICAgKiBNYXkgYmUgbmVnYXRpdmUgZm9yIFwiY291cG9uXCIgZXRjXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjdXJyZW5jeTogSVNPIHN0YW5kYXJkIGN1cnJlbmN5IGNvZGUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBza3U6IFRoZSBzdG9jayBrZWVwaW5nIHVuaXQgZm9yIHRoaXMgaXRlbS4gNTAgY2hhcmFjdGVycyBtYXggKG9wdGlvbmFsKVxuICAgKi9cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCBxdWFudGl0eTogbnVtYmVyLCBwcmljZTogc3RyaW5nLCBjdXJyZW5jeTogc3RyaW5nLCBza3U/OiBzdHJpbmcpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucXVhbnRpdHkgPSBxdWFudGl0eTtcbiAgICB0aGlzLnByaWNlID0gcHJpY2U7XG4gICAgdGhpcy5jdXJyZW5jeSA9IGN1cnJlbmN5O1xuICAgIHRoaXMuc2t1ID0gc2t1O1xuICB9XG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBpdGVtLiAxMjcgY2hhcmFjdGVycyBtYXhcbiAgICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIE51bWJlciBvZiB1bml0cy4gMTAgY2hhcmFjdGVycyBtYXguXG4gICAqL1xuICBxdWFudGl0eTogbnVtYmVyO1xuICAvKipcbiAgICogVW5pdCBwcmljZSBmb3IgdGhpcyBpdGVtIDEwIGNoYXJhY3RlcnMgbWF4LlxuICAgKi9cbiAgcHJpY2U6IHN0cmluZztcbiAgLyoqXG4gICAqIElTTyBzdGFuZGFyZCBjdXJyZW5jeSBjb2RlLlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBzdG9jayBrZWVwaW5nIHVuaXQgZm9yIHRoaXMgaXRlbS4gNTAgY2hhcmFjdGVycyBtYXggKG9wdGlvbmFsKVxuICAgKi9cbiAgc2t1Pzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFBheVBhbFBheW1lbnREZXRhaWxzIHtcbiAgLyoqXG4gICAqIFN1Yi10b3RhbCAoYW1vdW50KSBvZiBpdGVtcyBiZWluZyBwYWlkIGZvci4gMTAgY2hhcmFjdGVycyBtYXggd2l0aCBzdXBwb3J0IGZvciAyIGRlY2ltYWwgcGxhY2VzLlxuICAgKi9cbiAgc3VidG90YWw6IHN0cmluZztcbiAgLyoqXG4gICAqIEFtb3VudCBjaGFyZ2VkIGZvciBzaGlwcGluZy4gMTAgY2hhcmFjdGVycyBtYXggd2l0aCBzdXBwb3J0IGZvciAyIGRlY2ltYWwgcGxhY2VzLlxuICAgKi9cbiAgc2hpcHBpbmc6IHN0cmluZztcbiAgLyoqXG4gICAqIEFtb3VudCBjaGFyZ2VkIGZvciB0YXguIDEwIGNoYXJhY3RlcnMgbWF4IHdpdGggc3VwcG9ydCBmb3IgMiBkZWNpbWFsIHBsYWNlcy5cbiAgICovXG4gIHRheDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgUGF5UGFsUGF5bWVudERldGFpbHMgY2xhc3MgZGVmaW5lcyBvcHRpb25hbCBhbW91bnQgZGV0YWlscy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHN1YnRvdGFsOiBTdWItdG90YWwgKGFtb3VudCkgb2YgaXRlbXMgYmVpbmcgcGFpZCBmb3IuIDEwIGNoYXJhY3RlcnMgbWF4IHdpdGggc3VwcG9ydCBmb3IgMiBkZWNpbWFsIHBsYWNlcy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHNoaXBwaW5nOiBBbW91bnQgY2hhcmdlZCBmb3Igc2hpcHBpbmcuIDEwIGNoYXJhY3RlcnMgbWF4IHdpdGggc3VwcG9ydCBmb3IgMiBkZWNpbWFsIHBsYWNlcy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRheDogQW1vdW50IGNoYXJnZWQgZm9yIHRheC4gMTAgY2hhcmFjdGVycyBtYXggd2l0aCBzdXBwb3J0IGZvciAyIGRlY2ltYWwgcGxhY2VzLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3VidG90YWw6IHN0cmluZywgc2hpcHBpbmc6IHN0cmluZywgdGF4OiBzdHJpbmcpIHtcbiAgICB0aGlzLnN1YnRvdGFsID0gc3VidG90YWw7XG4gICAgdGhpcy5zaGlwcGluZyA9IHNoaXBwaW5nO1xuICAgIHRoaXMudGF4ID0gdGF4O1xuICB9XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBheVBhbENvbmZpZ3VyYXRpb25PcHRpb25zIHtcbiAgLyoqXG4gICAqIFdpbGwgYmUgb3ZlcnJpZGRlbiBieSBlbWFpbCB1c2VkIGluIG1vc3QgcmVjZW50IFBheVBhbCBsb2dpbi5cbiAgICovXG4gIGRlZmF1bHRVc2VyRW1haWw/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaWxsIGJlIG92ZXJyaWRkZW4gYnkgcGhvbmUgY291bnRyeSBjb2RlIHVzZWQgaW4gbW9zdCByZWNlbnQgUGF5UGFsIGxvZ2luXG4gICAqL1xuICBkZWZhdWx0VXNlclBob25lQ291bnRyeUNvZGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBXaWxsIGJlIG92ZXJyaWRkZW4gYnkgcGhvbmUgbnVtYmVyIHVzZWQgaW4gbW9zdCByZWNlbnQgUGF5UGFsIGxvZ2luLlxuICAgKi9cbiAgZGVmYXVsdFVzZXJQaG9uZU51bWJlcj86IHN0cmluZztcbiAgLyoqXG4gICAqIFlvdXIgY29tcGFueSBuYW1lLCBhcyBpdCBzaG91bGQgYmUgZGlzcGxheWVkIHRvIHRoZSB1c2VyIHdoZW4gcmVxdWVzdGluZyBjb25zZW50IHZpYSBhIFBheVBhbEZ1dHVyZVBheW1lbnRWaWV3Q29udHJvbGxlci5cbiAgICovXG4gIG1lcmNoYW50TmFtZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFVSTCBvZiB5b3VyIGNvbXBhbnkncyBwcml2YWN5IHBvbGljeSwgd2hpY2ggd2lsbCBiZSBvZmZlcmVkIHRvIHRoZSB1c2VyIHdoZW4gcmVxdWVzdGluZyBjb25zZW50IHZpYSBhIFBheVBhbEZ1dHVyZVBheW1lbnRWaWV3Q29udHJvbGxlci5cbiAgICovXG4gIG1lcmNoYW50UHJpdmFjeVBvbGljeVVSTD86IHN0cmluZztcbiAgLyoqXG4gICAqIFVSTCBvZiB5b3VyIGNvbXBhbnkncyB1c2VyIGFncmVlbWVudCwgd2hpY2ggd2lsbCBiZSBvZmZlcmVkIHRvIHRoZSB1c2VyIHdoZW4gcmVxdWVzdGluZyBjb25zZW50IHZpYSBhIFBheVBhbEZ1dHVyZVBheW1lbnRWaWV3Q29udHJvbGxlci5cbiAgICovXG4gIG1lcmNoYW50VXNlckFncmVlbWVudFVSTD86IHN0cmluZztcbiAgLyoqXG4gICAqIElmIHNldCB0byBOTywgdGhlIFNESyB3aWxsIG9ubHkgc3VwcG9ydCBwYXlpbmcgd2l0aCBQYXlQYWwsIG5vdCB3aXRoIGNyZWRpdCBjYXJkcy5cbiAgICogVGhpcyBhcHBsaWVzIG9ubHkgdG8gc2luZ2xlIHBheW1lbnRzICh2aWEgUGF5UGFsUGF5bWVudFZpZXdDb250cm9sbGVyKS5cbiAgICogRnV0dXJlIHBheW1lbnRzICh2aWEgUGF5UGFsRnV0dXJlUGF5bWVudFZpZXdDb250cm9sbGVyKSBhbHdheXMgdXNlIFBheVBhbC5cbiAgICogRGVmYXVsdHMgdG8gdHJ1ZVxuICAgKi9cbiAgYWNjZXB0Q3JlZGl0Q2FyZHM/OiBib29sZWFuO1xuICAvKipcbiAgICogRm9yIHNpbmdsZSBwYXltZW50cywgb3B0aW9ucyBmb3IgdGhlIHNoaXBwaW5nIGFkZHJlc3MuXG4gICAqIC0gMCAtIFBheVBhbFNoaXBwaW5nQWRkcmVzc09wdGlvbk5vbmU6IG5vIHNoaXBwaW5nIGFkZHJlc3MgYXBwbGllcy5cbiAgICogLSAxIC0gUGF5UGFsU2hpcHBpbmdBZGRyZXNzT3B0aW9uUHJvdmlkZWQ6IHNoaXBwaW5nIGFkZHJlc3Mgd2lsbCBiZSBwcm92aWRlZCBieSB5b3VyIGFwcCxcbiAgICogICBpbiB0aGUgc2hpcHBpbmdBZGRyZXNzIHByb3BlcnR5IG9mIFBheVBhbFBheW1lbnQuXG4gICAqIC0gMiAtIFBheVBhbFNoaXBwaW5nQWRkcmVzc09wdGlvblBheVBhbDogdXNlciB3aWxsIGNob29zZSBmcm9tIHNoaXBwaW5nIGFkZHJlc3NlcyBvbiBmaWxlXG4gICAqICAgZm9yIHRoZWlyIFBheVBhbCBhY2NvdW50LlxuICAgKiAtIDMgLSBQYXlQYWxTaGlwcGluZ0FkZHJlc3NPcHRpb25Cb3RoOiB1c2VyIHdpbGwgY2hvb3NlIGZyb20gdGhlIHNoaXBwaW5nIGFkZHJlc3MgcHJvdmlkZWQgYnkgeW91ciBhcHAsXG4gICAqICAgaW4gdGhlIHNoaXBwaW5nQWRkcmVzcyBwcm9wZXJ0eSBvZiBQYXlQYWxQYXltZW50LCBwbHVzIHRoZSBzaGlwcGluZyBhZGRyZXNzZXMgb24gZmlsZSBmb3IgdGhlIHVzZXIncyBQYXlQYWwgYWNjb3VudC5cbiAgICogRGVmYXVsdHMgdG8gMCAoUGF5UGFsU2hpcHBpbmdBZGRyZXNzT3B0aW9uTm9uZSkuXG4gICAqL1xuICBwYXlQYWxTaGlwcGluZ0FkZHJlc3NPcHRpb24/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBJZiBzZXQgdG8gWUVTLCB0aGVuIGlmIHRoZSB1c2VyIHBheXMgdmlhIHRoZWlyIFBheVBhbCBhY2NvdW50LFxuICAgKiB0aGUgU0RLIHdpbGwgcmVtZW1iZXIgdGhlIHVzZXIncyBQYXlQYWwgdXNlcm5hbWUgb3IgcGhvbmUgbnVtYmVyO1xuICAgKiBpZiB0aGUgdXNlciBwYXlzIHZpYSB0aGVpciBjcmVkaXQgY2FyZCwgdGhlbiB0aGUgU0RLIHdpbGwgcmVtZW1iZXJcbiAgICogdGhlIFBheVBhbCBWYXVsdCB0b2tlbiByZXByZXNlbnRpbmcgdGhlIHVzZXIncyBjcmVkaXQgY2FyZC5cbiAgICpcbiAgICogSWYgc2V0IHRvIE5PLCB0aGVuIGFueSBwcmV2aW91c2x5LXJlbWVtYmVyZWQgdXNlcm5hbWUsIHBob25lIG51bWJlciwgb3JcbiAgICogY3JlZGl0IGNhcmQgdG9rZW4gd2lsbCBiZSBlcmFzZWQsIGFuZCBzdWJzZXF1ZW50IHBheW1lbnQgaW5mb3JtYXRpb24gd2lsbFxuICAgKiBub3QgYmUgcmVtZW1iZXJlZC5cbiAgICpcbiAgICogRGVmYXVsdHMgdG8gWUVTLlxuICAgKi9cbiAgcmVtZW1iZXJVc2VyPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIElmIG5vdCBzZXQsIG9yIGlmIHNldCB0byBuaWwsIGRlZmF1bHRzIHRvIHRoZSBkZXZpY2UncyBjdXJyZW50IGxhbmd1YWdlIHNldHRpbmcuXG4gICAqXG4gICAqIENhbiBiZSBzcGVjaWZpZWQgYXMgYSBsYW5ndWFnZSBjb2RlIChcImVuXCIsIFwiZnJcIiwgXCJ6aC1IYW5zXCIsIGV0Yy4pIG9yIGFzIGEgbG9jYWxlIChcImVuX0FVXCIsIFwiZnJfRlJcIiwgXCJ6aC1IYW50X0hLXCIsIGV0Yy4pLlxuICAgKiBJZiB0aGUgbGlicmFyeSBkb2VzIG5vdCBjb250YWluIGxvY2FsaXplZCBzdHJpbmdzIGZvciBhIHNwZWNpZmllZCBsb2NhbGUsIHRoZW4gd2lsbCBmYWxsIGJhY2sgdG8gdGhlIGxhbmd1YWdlLiBFLmcuLCBcImVzX0NPXCIgLT4gXCJlc1wiLlxuICAgKiBJZiB0aGUgbGlicmFyeSBkb2VzIG5vdCBjb250YWluIGxvY2FsaXplZCBzdHJpbmdzIGZvciBhIHNwZWNpZmllZCBsYW5ndWFnZSwgdGhlbiB3aWxsIGZhbGwgYmFjayB0byBBbWVyaWNhbiBFbmdsaXNoLlxuICAgKlxuICAgKiBJZiB5b3Ugc3BlY2lmeSBvbmx5IGEgbGFuZ3VhZ2UgY29kZSwgYW5kIHRoYXQgY29kZSBtYXRjaGVzIHRoZSBkZXZpY2UncyBjdXJyZW50bHkgcHJlZmVycmVkIGxhbmd1YWdlLFxuICAgKiB0aGVuIHRoZSBsaWJyYXJ5IHdpbGwgYXR0ZW1wdCB0byB1c2UgdGhlIGRldmljZSdzIGN1cnJlbnQgcmVnaW9uIGFzIHdlbGwuXG4gICAqIEUuZy4sIHNwZWNpZnlpbmcgXCJlblwiIG9uIGEgZGV2aWNlIHNldCB0byBcIkVuZ2xpc2hcIiBhbmQgXCJVbml0ZWQgS2luZ2RvbVwiIHdpbGwgcmVzdWx0IGluIFwiZW5fR0JcIi5cbiAgICovXG4gIGxhbmd1YWdlT3JMb2NhbGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBOb3JtYWxseSwgdGhlIFNESyBibHVycyB0aGUgc2NyZWVuIHdoZW4gdGhlIGFwcCBpcyBiYWNrZ3JvdW5kZWQsXG4gICAqIHRvIG9ic2N1cmUgY3JlZGl0IGNhcmQgb3IgUGF5UGFsIGFjY291bnQgZGV0YWlscyBpbiB0aGUgaU9TLXNhdmVkIHNjcmVlbnNob3QuXG4gICAqIElmIHlvdXIgYXBwIGFscmVhZHkgZG9lcyBpdHMgb3duIGJsdXJyaW5nIHVwb24gYmFja2dyb3VuZGluZywgeW91IG1pZ2h0IGNob29zZSB0byBkaXNhYmxlIHRoaXMuXG4gICAqIERlZmF1bHRzIHRvIE5PLlxuICAgKi9cbiAgZGlzYWJsZUJsdXJXaGVuQmFja2dyb3VuZGluZz86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBJZiB5b3Ugd2lsbCBwcmVzZW50IHRoZSBTREsncyB2aWV3IGNvbnRyb2xsZXIgd2l0aGluIGEgcG9wb3ZlciwgdGhlbiBzZXQgdGhpcyBwcm9wZXJ0eSB0byBZRVMuXG4gICAqIERlZmF1bHRzIHRvIE5PLiAoaU9TIG9ubHkpXG4gICAqL1xuICBwcmVzZW50aW5nSW5Qb3BvdmVyPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFNhbmRib3ggY3JlZGVudGlhbHMgY2FuIGJlIGRpZmZpY3VsdCB0byB0eXBlIG9uIGEgbW9iaWxlIGRldmljZS4gU2V0dGluZyB0aGlzIGZsYWcgdG8gWUVTIHdpbGxcbiAgICogY2F1c2UgdGhlIHNhbmRib3hVc2VyUGFzc3dvcmQgYW5kIHNhbmRib3hVc2VyUGluIHRvIGFsd2F5cyBiZSBwcmUtcG9wdWxhdGVkIGludG8gbG9naW4gZmllbGRzLlxuICAgKi9cbiAgZm9yY2VEZWZhdWx0c0luU2FuZGJveD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBQYXNzd29yZCB0byB1c2UgZm9yIHNhbmRib3ggaWYgJ2ZvcmNlRGVmYXVsdHNJblNhbmRib3gnIGlzIHNldC5cbiAgICovXG4gIHNhbmRib3hVc2VyUGFzc3dvcmQ/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQSU4gdG8gdXNlIGZvciBzYW5kYm94IGlmICdmb3JjZURlZmF1bHRzSW5TYW5kYm94JyBpcyBzZXQuXG4gICAqL1xuICBzYW5kYm94VXNlclBpbj86IHN0cmluZztcblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKi9cbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFBheVBhbENvbmZpZ3VyYXRpb24gaW1wbGVtZW50cyBQYXlQYWxDb25maWd1cmF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBZb3UgdXNlIGEgUGF5UGFsQ29uZmlndXJhdGlvbiBvYmplY3QgdG8gY29uZmlndXJlIG1hbnkgYXNwZWN0cyBvZiBob3cgdGhlIFNESyBiZWhhdmVzLlxuICAgKiBzZWUgZGVmYXVsdHMgZm9yIG9wdGlvbnMgYXZhaWxhYmxlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogUGF5UGFsQ29uZmlndXJhdGlvbk9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWZhdWx0czogUGF5UGFsQ29uZmlndXJhdGlvbk9wdGlvbnMgPSB7XG4gICAgICBkZWZhdWx0VXNlckVtYWlsOiBudWxsLFxuICAgICAgZGVmYXVsdFVzZXJQaG9uZUNvdW50cnlDb2RlOiBudWxsLFxuICAgICAgZGVmYXVsdFVzZXJQaG9uZU51bWJlcjogbnVsbCxcbiAgICAgIG1lcmNoYW50TmFtZTogbnVsbCxcbiAgICAgIG1lcmNoYW50UHJpdmFjeVBvbGljeVVSTDogbnVsbCxcbiAgICAgIG1lcmNoYW50VXNlckFncmVlbWVudFVSTDogbnVsbCxcbiAgICAgIGFjY2VwdENyZWRpdENhcmRzOiB0cnVlLFxuICAgICAgcGF5UGFsU2hpcHBpbmdBZGRyZXNzT3B0aW9uOiAwLFxuICAgICAgcmVtZW1iZXJVc2VyOiB0cnVlLFxuICAgICAgbGFuZ3VhZ2VPckxvY2FsZTogbnVsbCxcbiAgICAgIGRpc2FibGVCbHVyV2hlbkJhY2tncm91bmRpbmc6IGZhbHNlLFxuICAgICAgcHJlc2VudGluZ0luUG9wb3ZlcjogZmFsc2UsXG4gICAgICBmb3JjZURlZmF1bHRzSW5TYW5kYm94OiBmYWxzZSxcbiAgICAgIHNhbmRib3hVc2VyUGFzc3dvcmQ6IG51bGwsXG4gICAgICBzYW5kYm94VXNlclBpbjogbnVsbCxcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKGNvbnN0IGkgaW4gb3B0aW9ucykge1xuICAgICAgICBpZiAoZGVmYXVsdHMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgICBkZWZhdWx0c1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXlQYWxTaGlwcGluZ0FkZHJlc3Mge1xuICAvKipcbiAgICogU2VlIHRoZSBkb2N1bWVudGF0aW9uIG9mIHRoZSBpbmRpdmlkdWFsIHByb3BlcnRpZXMgZm9yIG1vcmUgZGV0YWlsLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcmVjaXBpZW50TmFtZTogTmFtZSBvZiB0aGUgcmVjaXBpZW50IGF0IHRoaXMgYWRkcmVzcy4gNTAgY2hhcmFjdGVycyBtYXguXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBsaW5lMTogTGluZSAxIG9mIHRoZSBhZGRyZXNzIChlLmcuLCBOdW1iZXIsIHN0cmVldCwgZXRjKS4gMTAwIGNoYXJhY3RlcnMgbWF4LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbGluZTI6IExpbmUgMiBvZiB0aGUgYWRkcmVzcyAoZS5nLiwgU3VpdGUsIGFwdCAjLCBldGMpLiAxMDAgY2hhcmFjdGVycyBtYXguIE9wdGlvbmFsLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gY2l0eTogQ2l0eSBuYW1lLiA1MCBjaGFyYWN0ZXJzIG1heC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlOiAyLWxldHRlciBjb2RlIGZvciBVUyBzdGF0ZXMsIGFuZCB0aGUgZXF1aXZhbGVudCBmb3Igb3RoZXIgY291bnRyaWVzLiAxMDAgY2hhcmFjdGVycyBtYXguIFJlcXVpcmVkIGluIGNlcnRhaW4gY291bnRyaWVzLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcG9zdGFsQ29kZTogWklQIGNvZGUgb3IgZXF1aXZhbGVudCBpcyB1c3VhbGx5IHJlcXVpcmVkIGZvciBjb3VudHJpZXMgdGhhdCBoYXZlIHRoZW0uIDIwIGNoYXJhY3RlcnMgbWF4LiBSZXF1aXJlZCBpbiBjZXJ0YWluIGNvdW50cmllcy5cbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvdW50cnlDb2RlOiAyLWxldHRlciBjb3VudHJ5IGNvZGUuIDIgY2hhcmFjdGVycyBtYXguXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICByZWNpcGllbnROYW1lOiBzdHJpbmcsXG4gICAgbGluZTE6IHN0cmluZyxcbiAgICBsaW5lMjogc3RyaW5nLFxuICAgIGNpdHk6IHN0cmluZyxcbiAgICBzdGF0ZTogc3RyaW5nLFxuICAgIHBvc3RhbENvZGU6IHN0cmluZyxcbiAgICBjb3VudHJ5Q29kZTogc3RyaW5nXG4gICkge1xuICAgIHRoaXMucmVjaXBpZW50TmFtZSA9IHJlY2lwaWVudE5hbWU7XG4gICAgdGhpcy5saW5lMSA9IGxpbmUxO1xuICAgIHRoaXMubGluZTIgPSBsaW5lMjtcbiAgICB0aGlzLmNpdHkgPSBjaXR5O1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLnBvc3RhbENvZGUgPSBwb3N0YWxDb2RlO1xuICAgIHRoaXMuY291bnRyeUNvZGUgPSBjb3VudHJ5Q29kZTtcbiAgfVxuICAvKipcbiAgICogTmFtZSBvZiB0aGUgcmVjaXBpZW50IGF0IHRoaXMgYWRkcmVzcy4gNTAgY2hhcmFjdGVycyBtYXguXG4gICAqL1xuICByZWNpcGllbnROYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBMaW5lIDEgb2YgdGhlIGFkZHJlc3MgKGUuZy4sIE51bWJlciwgc3RyZWV0LCBldGMpLiAxMDAgY2hhcmFjdGVycyBtYXguXG4gICAqL1xuICBsaW5lMTogc3RyaW5nO1xuICAvKipcbiAgICogTGluZSAyIG9mIHRoZSBhZGRyZXNzIChlLmcuLCBTdWl0ZSwgYXB0ICMsIGV0YykuIDEwMCBjaGFyYWN0ZXJzIG1heC4gT3B0aW9uYWwuXG4gICAqL1xuICBsaW5lMjogc3RyaW5nO1xuICAvKipcbiAgICogQ2l0eSBuYW1lLiA1MCBjaGFyYWN0ZXJzIG1heC5cbiAgICovXG4gIGNpdHk6IHN0cmluZztcbiAgLyoqXG4gICAqIDItbGV0dGVyIGNvZGUgZm9yIFVTIHN0YXRlcywgYW5kIHRoZSBlcXVpdmFsZW50IGZvciBvdGhlciBjb3VudHJpZXMuIDEwMCBjaGFyYWN0ZXJzIG1heC4gUmVxdWlyZWQgaW4gY2VydGFpbiBjb3VudHJpZXMuXG4gICAqL1xuICBzdGF0ZTogc3RyaW5nO1xuICAvKipcbiAgICogWklQIGNvZGUgb3IgZXF1aXZhbGVudCBpcyB1c3VhbGx5IHJlcXVpcmVkIGZvciBjb3VudHJpZXMgdGhhdCBoYXZlIHRoZW0uIDIwIGNoYXJhY3RlcnMgbWF4LiBSZXF1aXJlZCBpbiBjZXJ0YWluIGNvdW50cmllcy5cbiAgICovXG4gIHBvc3RhbENvZGU6IHN0cmluZztcbiAgLyoqXG4gICAqIDItbGV0dGVyIGNvdW50cnkgY29kZS4gMiBjaGFyYWN0ZXJzIG1heC5cbiAgICovXG4gIGNvdW50cnlDb2RlOiBzdHJpbmc7XG59XG4iXX0=